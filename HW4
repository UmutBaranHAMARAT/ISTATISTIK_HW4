####################################################################1B
############################################F TABLOSU
"""
from scipy.stats import f_oneway
import scipy.stats
from tabulate import tabulate

alpha = 0.05
dof2_values = range(1,10)
dof1_values = []

for i in range(1,30):
    dof1_values.append([i])

dof1_values.append([40])
dof1_values.append([60])
dof1_values.append([90])
dof1_values.append([120])
dof1_values.append([100000000000000])

for i in range(0,len(dof1_values)):
    for j in dof2_values:
        dof1_values[i].append(round(scipy.stats.f.ppf(q=1-alpha, dfn=j, dfd=dof1_values[i][0]),2))

col_names = ["df1\df2"]+list(dof2_values)

print(tabulate(dof1_values,headers=col_names))
"""
#########################################################TEST
"""
from scipy.stats import f_oneway
import scipy.stats
from scipy.stats import f
import numpy as np
import matplotlib.pyplot as plt
alpha = 0.05
print("alpha=",alpha)
group1 = [6,7,4,5,6,3]
group2 = [8,10,11,7,12,11]
group3 = [10,11,8,6,13,12]
print(group1,"\n",group2,"\n",group3,"\n")
group_number=3
data_number=len(group1)*group_number
dof1 = group_number-1
dof2 = data_number-group_number
print("dof1=",dof1,"\n","dof2=",dof2)
#conduct the one-way ANOVA
f_value_calculated,p_value_calculated=f_oneway(group1,group2,group3)
f_value_critical=scipy.stats.f.ppf(q=1-alpha,dfn=dof1,dfd=dof2)
print("f_value_critical=", f_value_critical)
print("Result: \n")
if f_value_critical <= f_value_calculated:
    print("While f_value_critical < f_value_calculated:")
    print("There is sufficient evidence to reject the H0 hypothesis.")
    print("(We cannot say that all population means are equal.)")
else:
    print("While f_value_critical > f_value_calculated:")
    print("There is not enough evidence to reject the H0 hypothesis.")
    print("(We can say that all population means are equal.)")
x = data = np.arange(0, data_number, 0.01)
plt.plot(x, f.pdf(x, dof1, dof2),'c-', lw=5, alpha=0.5, label='f pdf')
plt.axvline(x = f_value_critical,ymax = 0.50, color = 'red', label = 'f_value_citical')
plt.text(f_value_critical, 0.5, round(f_value_critical, 2))
plt.axvline(x =f_value_calculated, ymax = 0.50, color = 'purple',label = 'f_value_calculated')
plt.text(f_value_calculated,0.5,  round(f_value_calculated, 2))
# place legend outside
plt.legend(bbox_to_anchor = (0.5, 1), loc = 'upper left')
plt.title("One way ANOVA")
plt.show()
"""

#################################################################################2B
##########################################################Ki Kare Tablosu
"""
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import chi2
from scipy.stats import chi2_contingency
from tabulate import tabulate

# print chi2 distribution table

p_values = [0.995, 0.975, 0.9, 0.5, 0.1, 0.05, 0.025, 0.01, 0.005]

chi2_values = []
for i in range(0, 16):
    chi2_values.append([i])

for i in p_values:
    for j in range(1, 16):
        chi2_values[j].append(round(chi2.ppf(1 - i, df=j), 3))

col_names = ["df\p"] + p_values
chi2_values.pop(0)
print(tabulate(chi2_values, headers=col_names))
"""

######################################################TEST
"""
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import chi2
from scipy.stats import chi2_contingency
from tabulate import tabulate

# defining the table
alpha=0.05
print("alpha=", alpha, "\n")

observed = [[400,55,45,400], [40,5,5,50]]
print("observed data=", observed, "\n")

dof=chi2_contingency(observed).dof


print("dof=",dof, "\n")

chi_square_critical=chi2.ppf(1-alpha, df=dof)
print("chi square_critical=",chi_square_critical, "\n")

expected=chi2_contingency(observed).expected_freq
print("expected table=", expected, "\n")

chi_square_calculated=0

for i in range(len(observed)):
    for j in range(len(observed[i])):
            chi_square_calculated+=(pow(observed[i][j]-expected[i][j],2))/expected[i][j]
print("chi square_calculated=",chi_square_calculated, "\n")
print("Result: \n")
if chi_square_critical <= chi_square_calculated:
    print("While chi_square_critical < chi_square_calculated:")
    print("There is sufficient evidence to reject the H0 hypothesis.")
    print("(We cannot say that it is independent.)")
else:
    print("While chi_square_critical > chi_square_calculated:")
    print("There is not enough evidence to reject the H0 hypothesis.")
    print("(We can say that it is independent.)")
#x-axis ranges from 0 to all with .001 steps
from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
#data = np.arange(0, len(observed)*len(observed[1]), 0.01)
sns.distplot(random.chisquare(df=dof, size=100000), hist=False)
#plt.plot(data, chi2.pdf(data, df=dof))
plt.axvline(x = chi_square_critical,ymax = 0.50, color = 'red', label = 'chi_square_critical')
plt.text(chi_square_critical, 0.5, round(chi_square_critical, 2))
plt.axvline(x =chi_square_calculated, ymax = 0.50, color = 'purple',label = 'chi_square_calculated')
plt.text(chi_square_calculated,0.5,  round(chi_square_calculated, 2))
# place legend outside
plt.legend(bbox_to_anchor = (0.5, 1), loc = 'upper left')
plt.title("Chi-Square test")
plt.show()
"""
